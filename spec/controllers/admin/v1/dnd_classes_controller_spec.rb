require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::V1::DndClassesController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # DndClass. As you add validations to DndClass, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:dnd_class)
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # DndClassesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let!(:admin) { create :admin_user }
  let!(:dungeon_master) { create :dungeon_master_user }
  let!(:user) { create :other_user }

  let!(:dnd_class) { create :dnd_class, user: dungeon_master }
  let!(:dnd_class_other) { create :dnd_class, user: user }

  describe "GET #index" do
    it "returns a success response" do
      DndClass.create! valid_attributes
      get :index, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      sign_in dungeon_master
      get :show, params: {slug: dnd_class.slug}
      expect(response).to be_successful
    end

    it "does NOT return a success response" do
      sign_in dungeon_master
      get :show, params: {slug: dnd_class_other.slug}
      expect(response).not_to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      sign_in dungeon_master
      get :new, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      sign_in admin
      get :edit, params: {slug: dnd_class.slug}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new DndClass" do
        sign_in dungeon_master
        expect {
          post :create, params: {dnd_class: valid_attributes}
        }.to change(DndClass, :count).by(1)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        {name: 'Death Knight'}
      }

      it "updates the requested dnd_class" do
        sign_in dungeon_master
        put :update, params: {slug: dnd_class.slug, dnd_class: new_attributes}
        dnd_class.reload
        expect(dnd_class.name).to eq('Death Knight')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested dnd_class" do
      sign_in dungeon_master
      expect {
        delete :destroy, params: {slug: dnd_class.slug}
      }.to change(DndClass, :count).by(-1)
    end
  end

end
