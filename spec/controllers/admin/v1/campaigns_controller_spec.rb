require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::V1::CampaignsController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Campaign. As you add validations to Campaign, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:campaign)
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # CampaignsController. Be sure to keep this updated too.
  let(:valid_session) { {} }
  let!(:admin) { create :admin_user }
  let!(:dungeon_master) { create :dungeon_master_user }
  let!(:campaign1) { create :campaign }
  let!(:campaign2) { create :campaign }
  let!(:campaign3) { create :campaign }
  let!(:campaign4) { create :campaign, user: dungeon_master }

  describe "GET #index" do

    context 'for admin' do

      it 'returns success' do
        sign_in admin
        get :index, format: :json
        expect(response).to be_successful
      end

      it 'renders the index template' do
        sign_in admin
        get :index, format: :json
        expect(response).to render_template("index")
      end

      it 'returns all campaigns (admin)' do
        sign_in admin
        get :index, format: :json
        expect(assigns(:campaigns)).to eq([campaign1, campaign2, campaign3, campaign4])
      end
    end

    context 'for dungeon master' do

      it 'returns only dungeon masters campaigns' do
        sign_in dungeon_master
        get :index, format: :json
        expect(assigns(:campaigns)).to eq([campaign4])
      end
    end

    context 'for logged out user' do
      it 'does not return a success response' do
        get :index, format: :json
        expect(response).not_to be_successful
        expect(assigns(:campaigns)).to eq(nil)
      end
    end
  end

  describe "GET #show" do

    it "returns a success response" do
      sign_in dungeon_master
      get :show, params: {slug: campaign4.to_param}
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      sign_in dungeon_master
      get :new, params: {}
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response for ADMIN only" do
      sign_in admin
      get :edit, params: {slug: campaign4.to_param}
      expect(response).to be_successful
    end

    it "does not return a success response for non-ADMIN users" do
      sign_in dungeon_master
      get :edit, params: {slug: campaign4.to_param}
      expect(response).not_to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Campaign" do
        sign_in dungeon_master
        expect {
          post :create, params: {campaign: valid_attributes}
        }.to change(Campaign, :count).by(1)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do

      it "updates the requested campaign" do
        sign_in dungeon_master
        put :update,
            params: {
              slug: campaign4.to_param,
              campaign: {name: 'New Campaign Name'}
            }
        campaign4.reload
        expect(campaign4.name).to eq('New Campaign Name')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested campaign" do
      sign_in dungeon_master
      expect {
        delete :destroy, params: {slug: campaign4.to_param}
      }.to change(Campaign, :count).by(-1)
    end

    it "does NOT destroy the requested campaign" do
      sign_in dungeon_master
      expect {
        delete :destroy, params: {slug: campaign3.to_param}
      }.to change(Campaign, :count).by(0)
    end
  end

end
