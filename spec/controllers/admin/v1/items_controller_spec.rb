require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::V1::ItemsController, type: :controller do

  let!(:admin) { create :admin_user }
  let!(:dungeon_master) { create :dungeon_master_user }

  # This should return the minimal set of attributes required to create a valid
  # Item. As you add validations to Item, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:item, user: dungeon_master)
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }
  let!(:item) { create :item }
  let!(:armor_item) { create :item,
                             type: 'ArmorItem',
                             armor_class: 14,
                             armor_class_bonus: 0 }
  let!(:weapon_item) { create :item,
                              type: 'WeaponItem',
                              weapon_attack_bonus: 0,
                              weapon_damage_bonus: 0,
                              weapon_damage_dice_count: 1,
                              weapon_damage_dice_value: 8,
                              weapon_damage_type: 'bludgeoning' }
  let!(:gear_item) { create :item, type: 'GearItem' }
  let!(:magic_item) { create :item, type: 'MagicItem', rarity: 'uncommon' }

  describe "GET #index" do
    it "returns a success response" do
      get :index, params: {}
      expect(response).to have_http_status(:ok)
    end

    it "returns 5 items" do
      get :index, params: {}
      expect(assigns(:items).count).to eq(5)
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, params: {slug: item.slug}
      expect(response).to have_http_status(:ok)
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      sign_in dungeon_master
      get :new, params: {}
      expect(response).to have_http_status(:ok)
    end

    it "returns a new item" do
      sign_in dungeon_master
      get :new, params: {}
      expect(assigns(:item)).to be_a_new(Item)
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      sign_in admin
      get :edit, params: {slug: item.slug}
      expect(response).to have_http_status(:ok)
    end

    it "does NOT return a success response" do
      sign_in dungeon_master
      get :edit, params: {slug: item.slug}
      expect(response).to have_http_status(:forbidden)
    end
  end

  describe "POST #create" do
    context "with valid params belonging to DM" do
      it "creates a new Item" do
        sign_in dungeon_master
        expect {
          post :create, params: {item: valid_attributes}
        }.to change(Item, :count).by(1)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested item belonging to DM" do
        sign_in dungeon_master
        dm_item = Item.create!(name: 'Test Item', user: dungeon_master)
        put :update, params: {slug: dm_item.slug, item: {name: 'Test Item Edited'}}
        dm_item.reload
        expect(dm_item.name).to eq('Test Item Edited')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested item" do
      sign_in dungeon_master
      dm_item = Item.create!(name: 'Test Item', user: dungeon_master)
      expect {
        delete :destroy, params: {slug: dm_item.slug}
      }.to change(Item, :count).by(-1)
    end
  end

end
