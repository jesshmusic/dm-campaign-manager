require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::V1::CharactersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Character. As you add validations to Character, be sure to
  # adjust the attributes here as well.
  let!(:dnd_class) { create :dnd_class }
  let!(:race) { create :race, name: 'Half-elf', speed: '30 feet' }
  let(:valid_pc_attributes) {
    attributes_for(
      :player_character,
      character_classes_attributes: [ {level: 1, dnd_class_id: dnd_class.id} ]
    )
  }
  let(:valid_npc_attributes) {
    attributes_for(
      :non_player_character,
      character_classes_attributes: [ {level: 5, dnd_class_id: dnd_class.id} ]
    )
  }

  let(:invalid_attributes) {
    skip("Add a hash of attributes invalid for your model")
  }


  let!(:admin) { create :admin_user }
  let!(:dungeon_master) { create :dungeon_master_user }
  let!(:campaign) { create :campaign_with_assoc, user: dungeon_master }
  let!(:campaign_unowned) { create :campaign_with_assoc }

  describe "GET #index" do
    it "returns a success response" do
      sign_in dungeon_master
      get :index, format: :json, params: { campaign_slug: campaign.slug }
      expect(response).to be_successful
    end

    it 'returns characters with character classes' do
      sign_in dungeon_master
      get :index, format: :json, params: { campaign_slug: campaign.slug, type: 'PlayerCharacter' }
      expect(assigns(:characters).first.character_classes).not_to eq([])
    end

    it 'returns 5 player characters' do
      sign_in dungeon_master
      get :index, format: :json, params: { campaign_slug: campaign.slug, type: 'PlayerCharacter' }
      expect(assigns(:characters).count).to eq 5
    end

    it 'returns 10 non-player characters' do
      sign_in dungeon_master
      get :index, format: :json, params: { campaign_slug: campaign.slug, type: 'NonPlayerCharacter' }
      expect(assigns(:characters).count).to eq 10
    end


    it 'does NOT return a success response' do
      sign_in dungeon_master
      get :index, format: :json, params: { campaign_slug: campaign_unowned.slug }
      expect(response).not_to be_successful
    end
  end

  describe "GET #show" do
    it "returns a success response" do
      sign_in dungeon_master
      character_slug = campaign.characters.first.slug
      get :show, format: :json, params: {campaign_slug: campaign.slug, slug: character_slug}
      expect(response).to be_successful
    end

    it "returns a player character" do
      sign_in dungeon_master
      character_slug = campaign.pcs.first.slug
      get :show, format: :json, params: {campaign_slug: campaign.slug, slug: character_slug}
      expect(assigns(:character).type).to eq('PlayerCharacter')
    end

    it "returns a non-player character" do
      sign_in dungeon_master
      character_slug = campaign.npcs.first.slug
      get :show, format: :json, params: {campaign_slug: campaign.slug, slug: character_slug}
      expect(assigns(:character).type).to eq('NonPlayerCharacter')
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      sign_in dungeon_master
      get :new, format: :json, params: {campaign_slug: campaign.slug}
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "returns a success response" do
      sign_in admin
      character_slug = campaign.characters.first.slug
      get :edit, params: {campaign_slug: campaign.slug, slug: character_slug}
      expect(response).to be_successful
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Character" do
        sign_in dungeon_master
        expect {
          post :create, format: :json, params: {campaign_slug: campaign.slug, type: :player_character, player_character: valid_pc_attributes}
        }.to change(Character, :count).by(1)
      end

      it "creates a new Player Character" do
        sign_in dungeon_master
        post :create, format: :json, params: {campaign_slug: campaign.slug,
                               type: :player_character,
                               player_character: valid_pc_attributes}
        expect(assigns(:character).type).to eq('PlayerCharacter')
      end

      it "creates a new Non-Player Character" do
        sign_in dungeon_master
        post :create, format: :json, params: {
          campaign_slug: campaign.slug,
          type: :non_player_character,
          non_player_character: valid_npc_attributes}
        expect(assigns(:character).type).to eq('NonPlayerCharacter')
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      it "updates the requested character" do
        sign_in dungeon_master
        character_slug = campaign.pcs.first.slug
        put :update, format: :json, params: {
          campaign_slug: campaign.slug,
          slug: character_slug,
          type: :player_character,
          player_character: { name: 'Luke Skywalker'}
        }
        campaign.characters.first.reload
        expect(campaign.characters.first.name).to eq('Luke Skywalker')
      end
    end
  end

  describe "GET #generate_npc" do
    it "returns a success response" do
      sign_in dungeon_master
      get :generate_npc, params: {campaign_slug: campaign.slug}
      expect(response).to be_successful
    end
    it "returns a new NPC" do
      sign_in dungeon_master
      get :generate_npc, params: {campaign_slug: campaign.slug}
      expect(assigns(:character).type).to eq('NonPlayerCharacter')
    end
  end

  describe "POST #create_generated_npc" do
    it "returns a generated non-player character" do
      sign_in dungeon_master
      post :create_generated_npc,
           format: :json,
           params: {
        campaign_slug: campaign.slug,
        non_player_character: {
          name: 'Test NPC',
          race_id: race.id,
          role: 'Simple NPC',
          alignment: 'Chaotic Neutral',
          min_score: 17,
          character_classes_attributes: [ {level: 5, dnd_class_id: dnd_class.id} ],
        }
      }
      expect(assigns(:character).proficiency).to eq(3)
      expect(assigns(:character).name).to eq('Test NPC')
    end
  end

  describe "GET random_fantasy_name" do
    it "returns a random name in JSON format" do
      sign_in dungeon_master
      get :random_fantasy_name
      name_response = JSON.parse(response.body)
      expect(name_response.keys).to contain_exactly('name')
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested character" do
      sign_in dungeon_master
      character_slug = campaign.characters.first.slug
      expect {
        delete :destroy, format: :json, params: {campaign_slug: campaign.slug, slug: character_slug}
      }.to change(Character, :count).by(-1)
    end
  end

end
