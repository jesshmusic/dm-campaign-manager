require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe Admin::V1::EncountersController, type: :controller do

  # This should return the minimal set of attributes required to create a valid
  # Encounter. As you add validations to Encounter, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    attributes_for(:encounter)
  }

  let!(:admin) { create :admin_user }
  let!(:dungeon_master) { create :dungeon_master_user }
  let!(:campaign) { create :campaign_with_assoc, user: dungeon_master }
  let!(:campaign_unowned) { create :campaign_with_assoc }
  let!(:world_location) { create :world_location, campaign: campaign }

  before(:each) do
    sign_in dungeon_master
    @adventure = campaign.adventures.first
    @encounter = Encounter.create valid_attributes
    @adventure.encounters << @encounter
    @encounter.save!
  end

  describe "GET #show" do
    it "returns a success response" do
      get :show, params: {campaign_slug: campaign.slug,
                          adventure_id: @adventure.id,
                          id: @encounter.to_param}
      expect(response).to be_successful
    end
  end

  describe "GET #new" do
    it "returns a success response" do
      get :new, params: {campaign_slug: campaign.slug,
                         adventure_id: @adventure.id}
      expect(response).to be_successful
    end
  end

  describe "GET #edit" do
    it "does NOT return a success response" do
      get :edit, params: {campaign_slug: campaign.slug,
                          adventure_id: @adventure.id,
                          id: @encounter.to_param}
      expect(response).not_to be_successful
    end
  end

  describe "GET #random_individual_treasure" do
    it "returns a success response" do
      get :random_individual_treasure, params: {xp: 300}
      expect(response).to be_successful
    end

    it "returns a JSON object" do
      get :random_individual_treasure, params: {xp: 300}
      name_response = JSON.parse(response.body)
      expect(name_response.keys).to contain_exactly('copper_pieces',
                                                      'electrum_pieces',
                                                      'gold_pieces',
                                                      'platinum_pieces',
                                                      'silver_pieces')
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Encounter" do
        expect {
          post :create, params: {campaign_slug: campaign.slug,
                                 adventure_id: @adventure.id,
                                 encounter: valid_attributes}
        }.to change(Encounter, :count).by(1)
      end
    end
  end

  describe "PUT #update" do
    context "with valid params" do
      let(:new_attributes) {
        skip("Add a hash of attributes valid for your model")
      }

      it "updates the requested encounter" do
        put :update, params: {campaign_slug: campaign.slug,
                              adventure_id: @adventure.id,
                              id: @encounter.to_param,
                              encounter: {
                                location: 'Old Bed Chambers'
                              }}
        @encounter.reload
        expect(@encounter.location).to eq('Old Bed Chambers')
      end
    end
  end

  describe "DELETE #destroy" do
    it "destroys the requested encounter" do
      expect {
        delete :destroy, params: {campaign_slug: campaign.slug,
                                  adventure_id: @adventure.id,
                                  id: @encounter.to_param}
      }.to change(Encounter, :count).by(-1)
    end
  end

end
